class NANDTree:
    """ Instância uma NANDTree
    levels:int leaves:array"""
    def __init__(self,levels,leaves):
        self.leaves = leaves
        self.levels = levels
        self.validate_inputs()
    """Metodo que valida entradas"""
    def validate_inputs(self):
        if int(self.levels) < 0:
            raise Exception("invalid input for NAND tree. Levels tem que ser maior que 0")
        if 2**(self.levels-1) != len(self.leaves):
            raise Exception("invalid input for NAND tree. Quantidade de Folhas tem que ser multiplos de 2")
        for value in self.leaves:
            if value not in (0, 1):
                raise Exception("invalid input for NAND tree. A entrada não é 0 ou 1.")
    """Metodo que avalia NandTree"""
    def evaluate_simple(self, leaves=None):
        if leaves == None:
            leaves = self.leaves
        if len(leaves) == 1:
            return leaves[0]
        else:
            new_leaves = self.calculateNewleaves(leaves)
            return self.evaluate_simple(new_leaves)
    """Metodo para Calcular Novas folhas
    leaves:array"""
    def calculateNewleaves(self, leaves):
        leaves_pairs = [leaves[i:i+2] for i in range(0,len(leaves),2)]
        new_leaves = []
        for pair in leaves_pairs:
            new_leaves.append(self.calculateNAND(pair[0],pair[1]))
        return new_leaves
    "Metodo para Calcular Logic Port NAND"
    def calculateNAND(self, number1, number2):
        nand = not(number1 and number2)
        nand = int(nand == True)
        return nand
    """Metodo para avaliar NANDTree"""
    def evaluate_complex(self):
        splited_leaves = [self.leaves[i:i+2]for i in range(2)]
        if self.calculateNewleaves(splited_leaves[0]) == 0:
            return 1
        else:
            if self.calculateNewleaves(splited_leaves[1]) == 0:
                return 1
            else:
                return 0

test_Tree = NANDTree(3,[0,1,0,1])
print(test_Tree.evaluate_simple())
print(test_Tree.evaluate_complex())
